mutable scene := create_scene( "Main" )

scene.on_update = Function[Boolean] () {

    if( input.press( escape ) )
    {
        return false
    }

    return true
}


scene.on_2d = Function[Nil] () {  
    graphics.box( Transform2D( IntegerVector2D(0,0), 0, graphics.get_resolution() ), blue )

    screenCenter := graphics.get_resolution().x/2
    graphics.print_centered( screenCenter, 8, "FPS: " + to_string(get_fps()), white )
    
    draw_shapes( 120, 120 )
}

# Comment For Draw Shapes!
draw_shapes := Function[Nil] ( xInitial : Integer, y : Integer ) {

    mutable x := xInitial # making a mutable copy so we can change it
    size := 80 # in pixels
    offset := size + 25
    angle := get_time() * 45 # rotates 45 degrees every second the program runs
    
    # Each shape is drawn 5 times
    # First, the "empty" version shows how to draw just an outline
    # Second, the shape is drawn with a string-coded color from the internal aki list
    # Third, the shape is drawn with a 6-digit Hexcode
    # Forth, the shape is drawn with an RGBA specified color
    # Fifth, the shape is drawn using the image file located in "assets/grate.*"
    #               (where * is any supported image extension: bmp, gif, jpg, png, tif)
    
    # Note: any assets with an appropriate file extension will automatically be
    # added to the local namespace in this manner.
    
    graphics.box_empty_centered( Transform2D( x, y, angle, size), cyan )
    graphics.box_centered( Transform2D( x, y + offset, angle, size), cyan )
    graphics.box_centered( Transform2D( x, y + offset*2, angle, size), FFFF7F )
    graphics.box_centered( Transform2D( x, y + offset*3, angle, size), Color( 1.0, 0.5, 0.0, 1.0 ) )
    graphics.box_centered( Transform2D( x, y + offset*4, angle, size), assets.grate )
    x += offset

    graphics.circle_empty( Transform2D( x, y, angle, size), cyan )
    graphics.circle( Transform2D( x, y + offset, angle, size), cyan )
    graphics.circle( Transform2D( x, y + offset*2, angle, size), FFFF7F )
    graphics.circle( Transform2D( x, y + offset*3, angle, size), Color( 1.0, 0.5, 0.0, 1.0 ) )
    graphics.circle( Transform2D( x, y + offset*4, angle, size), assets.grate )
    x += offset
    
    # Polygons will always have one side pointing upward (unless rotated with an angle)
    # the points are all exactly "size" distance from the center, i.e. a polygon will always
    # fit perfectly inside a circle of the same size.
    graphics.polygon_empty( Transform2D( x, y, angle, size), 5, cyan )
    graphics.polygon( Transform2D( x, y + offset, angle, size), 4, cyan )
    graphics.polygon( Transform2D( x, y + offset*2, angle, size), 3, FFFF7F )
    graphics.polygon( Transform2D( x, y + offset*3, angle, size), 4, Color( 1.0, 0.5, 0.0, 1.0 ) )
    graphics.polygon( Transform2D( x, y + offset*4, angle, size), 5, assets.grate )
    x += offset
}