
Function on_load <Nil> () {
};

Function on_update <Boolean> () {

    if( input.press( escape ) )
    {
        return false;
    }
    
    return true;
};


Function on_2d <Nil> () {  
    graphics.box( IntegerVector2D(0,0), graphics.get_resolution(), blue );

    Integer screenCenter(graphics.get_resolution().x/2);
    graphics.print_centered( screenCenter, 8, "FPS: " + to_string(get_fps()), white );
    
    draw_shapes( 120, 120 );
};

Function draw_shapes <Nil> ( Integer xInitial, Integer y ) {

    mutable Integer x(xInitial); # making a mutable copy so we can change it
    
    Integer size(50); # in pixels
    
    Real polygonAngle( get_time() * 45 ); # rotates 45 degrees every second the program runs
    Integer polygonSides(5); # draw pentagons

    # Wildcard is a special type specifier that will inherit the type given to it
    # if "util.get_content" returns a String, then the type of "content" will be String
    # if "util.get_content" returns a Color, then the type of "content" will be Color
    # since all graphics functions can take either a color or a string, this will be valid
    Wildcard content( util.get_content() );
    
    graphics.box_centered( x, y, size, content );
    graphics.box_empty_centered( x, y + 60, size, content );
    x += 60;

    graphics.circle( x, y, size, content );
    graphics.circle_empty( x, y + 60, size, content );
    x += 60;
    
    graphics.polygon( x, y, size, polygonAngle, polygonSides, content );
    graphics.polygon_empty( x, y + 60, size, polygonAngle, polygonSides, content );
    x += 60;
    
    Type t = type_of( 3.0 );
    
    graphics.print( 300, 300, to_string( t ), white );
};