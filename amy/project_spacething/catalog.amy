mutable catalog := {
	components: mutable Dictionary {},
	shipSchematics: mutable Dictionary {},
	prototypes: mutable Dictionary {}
}

define_component := Function( name : String ) {
    catalog.components.insert( Dictionary { 
        draw: Function[Nil] ( d : Vector3D, r : Quaternion, bounds : Vector3D ) {
            rcMetal := RenderConfig( assets.metal1 )
			t := Transform3D(d, r, bounds)
            graphics.cylinder(t, rcMetal)
        }
    }, name )
}

define_ship_schematic := Function( name : String, data : Dictionary) {
	newSchematic := {
        componentInstances: mutable Array {},
        thrust: data.thrust,
        twist: Vector3D(data.twist[0], data.twist[1], data.twist[2])
    }
	for( i in data.componentInstances )
	{
		newSchematic.componentInstances.add( Dictionary {
			type: i.type,
			d:Vector3D( i.offset[0], i.offset[1], i.offset[2] ),
			r:math.euler( i.rotation[0], i.rotation[1], i.rotation[2] ),
			bounds:Vector3D( i.bounds[0], i.bounds[1], i.bounds[2] ),
		} )
	}
    catalog.shipSchematics.insert( newSchematic, name )
}

initialize_catalog := Function() {
    define_component( "tank" )
	for( schematic in assets.schematics )
	{
		define_ship_schematic( schematic.key, schematic.value )
	}
	
	shipDrawFunction := Function[Nil] ( instance : Dictionary ) {
		relativeScale := 0.1
		schematic := catalog.shipSchematics[instance.config.schematic]
		for( componentInstance in schematic.componentInstances )
		{
			finalPosition := (componentInstance.d * instance.r) * relativeScale + instance.d
			finalRotation := componentInstance.r * instance.r
			
			component := catalog.components[componentInstance.type]
			component.draw( finalPosition, finalRotation, componentInstance.bounds * relativeScale )
		}
	}
	catalog.prototypes.insert( Dictionary {
		draw: shipDrawFunction
	}, "ship" )
	
	worldDrawFunction := Function[Nil] ( instance : Dictionary ) {
		rc := RenderConfig( assets.earth, graphics.lit )
		
		angle := get_time() * 360.0 / instance.config.dayLength
		spin := math.pitch(90) * math.yaw(angle) * instance.r
		
		graphics.sphere( Transform3D( instance.d, spin, 1 ), rc )
	}
	catalog.prototypes.insert( Dictionary {
		draw: worldDrawFunction
	}, "world" )
}
