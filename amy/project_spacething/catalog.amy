mutable Dictionary catalog {
	components: mutable Dictionary {},
	shipSchematics: mutable Dictionary {},
	prototypes: mutable Dictionary {}
};

Function define_component( String name )
{
    catalog.components.insert( Dictionary { 
        draw: Function <Nil> ( Vector3D d, Quaternion r, Vector3D s ) {
            RenderConfig rcMetal( assets.metal1 );
			Transform3D t(d, r, s);
            graphics.cylinder(t, rcMetal);
        }
    }, name );
};

Function define_ship_schematic( String name, Dictionary data )
{
	Dictionary newSchematic {
        componentInstances: mutable Array {},
        thrust: data.thrust,
        twist: Vector3D(data.twist[0], data.twist[1], data.twist[2])
    };
	for( Wildcard i : data.componentInstances )
	{
		newSchematic.componentInstances.add( Dictionary {
			type: i.type,
			d:Vector3D( i.offset[0], i.offset[1], i.offset[2] ),
			r:math.euler( i.rotation[0], i.rotation[1], i.rotation[2] ),
			s:Vector3D( i.size[0], i.size[1], i.size[2] ),
		} );
	}
    catalog.shipSchematics.insert( newSchematic, name );
};

Function initialize_catalog()
{
    define_component( "tank" );
	for( Dictionary schematic : assets.schematics.dictionary() )
	{
		define_ship_schematic( schematic.key, schematic.value );
	}
	
	Function shipDrawFunction = Function <Nil> ( Dictionary instance )
	{
		Real relativeScale = 0.1;
		Dictionary schematic = catalog.shipSchematics[instance.config.schematic]; 
		for( Wildcard componentInstance : schematic.componentInstances )
		{
			Vector3D finalPosition = (componentInstance.d * instance.r) * relativeScale + instance.d;
			Quaternion finalRotation = componentInstance.r * instance.r;
			
			Wildcard component( catalog.components[componentInstance.type] );
			component.draw( finalPosition, finalRotation, componentInstance.s * relativeScale );
		}
	};
	catalog.prototypes.insert( Dictionary {
		draw: shipDrawFunction
	}, "ship" );
	
	Function worldDrawFunction = Function <Nil> ( Dictionary instance )
	{
		RenderConfig rc( assets.earth, graphics.lit );
		
		Real angle = get_time() * 360.0 / instance.config.dayLength;
		Quaternion spin = math.pitch(90) * math.yaw(angle) * instance.r;
		
		graphics.sphere( Transform3D( instance.d, spin, 1 ), rc );
	};
	catalog.prototypes.insert( Dictionary {
		draw: worldDrawFunction
	}, "world" );
};
