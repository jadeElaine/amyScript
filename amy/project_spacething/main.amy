language.require_version("0.1.0")

sim := Simulation { PrototypeInstantiator, Physics3DUpdate, SceneLink,
	PlanetConfig {texture : Texture, dayLength : Real},
	ShipConfig {schematic : String} }

on_load := Function[Nil] () {

    initialize_catalog()
	
	# Physics Config
	sim.create_entity( 
		Physics3DConfig : { timeStep: 0.01 s, gravity: ( 0, 0, 0 ) * m/s/s }
	)
	
	# Starfield
	sim.create_entity( 
		Physicality3DDiscrete : {},
		ViewFunction : { skybox: Function( sc : Scene ) {
			rcStars := RenderConfig( assets.starfield, graphics.unlit )
			graphics.sphere_shell( Transform3D( math.v3zero, math.pitch(90), 10.0 ), rcStars )
		} }
	)
	
	# Planet
	worldRenderFunction := Function( sc : Scene ) {
		rc := RenderConfig( this.PlanetConfig.texture, graphics.lit )
		
		angle := get_time() * 360.0 / this.PlanetConfig.dayLength
		spin := math.pitch(90) * math.yaw(angle) * this.Physicality3DKinematic.rotation
		
		graphics.sphere( Transform3D( this.Physicality3DKinematic.position.to_vector3d(), spin, 1 ), rc )
	}
	
	sim.create_entity(
		Prototype : {},
		Named : { name: world },
		Physicality3DGenerator : { type: Physicality3DKinematic },
		ViewFunction : { solid: worldRenderFunction }
	)
	
	earthInst := sim.instantiate(world)
	earthInst.add_components( PlanetConfig : { dayLength: 5.0, texture: assets.earth } )
	earthInst.Physicality3DKinematic.position = (0, 0, 0) m
	earthInst.Physicality3DKinematic.rotation = math.roll(-22.5)
	
	# Ship
	shipRenderFunction := Function( sc : Scene ) {
		relativeScale := 0.1
		schematic := catalog.shipSchematics[this.ShipConfig.schematic]
		for( componentInstance in schematic.componentInstances )
		{
			finalPosition := (componentInstance.d * this.Physicality3DInertial.rotation) * relativeScale + this.Physicality3DInertial.position.to_vector3d()
			finalRotation := componentInstance.r * this.Physicality3DInertial.rotation
			
			component := catalog.components[componentInstance.type]
			component.draw( finalPosition, finalRotation, componentInstance.bounds * relativeScale )
		}
	}
	
	sim.create_entity(
		Prototype : {},
		Named : { name: ship },
		Physicality3DGenerator : { type: Physicality3DInertial },
		ViewFunction : { solid : shipRenderFunction }
	)
	
	{
		shipInst := sim.instantiate(ship)
		shipInst.add_components( ShipConfig : { schematic: "test" } )
		shipInst.Physicality3DInertial.position = (.75, -1.0, 2.0) m
		shipInst.Physicality3DInertial.rotation = math.yaw(0) * math.roll(45)
	}
    
	{
		shipInst := sim.instantiate(ship)
		shipInst.add_components( ShipConfig : { schematic: "test" } )
		shipInst.Physicality3DInertial.position = (.75, -0.4, 2.0) m
		shipInst.Physicality3DInertial.rotation = math.yaw(45) * math.roll(45)
		
		userState.controlledObjectId = shipInst.guid
	}
    
    change_scene(playScene)
}
