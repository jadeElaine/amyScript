language.require_version("0.2.0")

userState =& mutable Dictionary[mutable Auto] {
    controlledObjectId: Guid()
}

user_fly_ship =& Function( ship : Entity ) {

    shipSchematic =& catalog.shipSchematics[ship.CpShipConfig.schematic]
    phys =& ship.CpPhysicality3DInertial

    torquing =& mutable Boolean(false)

    if( input.hold( w ) )
    {
        phys.omega -= math.v3right * time.get_delta_time() * shipSchematic.twist.x rad/s
        torquing = true
    }
    if( input.hold( s ) )
    {
        phys.omega += math.v3right * time.get_delta_time() * shipSchematic.twist.x rad/s
        torquing = true
    }

    if( input.hold( a ) )
    {
        phys.omega += math.v3up * time.get_delta_time() * shipSchematic.twist.y rad/s
        torquing = true
    }
    if( input.hold( d ) )
    {
        phys.omega -= math.v3up * time.get_delta_time() * shipSchematic.twist.y rad/s
        torquing = true
    }

    if( input.hold( q ) )
    {
        phys.omega += math.v3forward * time.get_delta_time() * shipSchematic.twist.z rad/s
        torquing = true
    }
    if( input.hold( e ) )
    {
        phys.omega -= math.v3forward * time.get_delta_time() * shipSchematic.twist.z rad/s
        torquing = true
    }

    if( input.hold( space ) )
    {
        phys.velocity += (math.v3forward * phys.rotation) * time.get_delta_time() * shipSchematic.thrust m/s
    }

    if( !torquing )
    {
        step =& time.get_delta_time() * 35.0
        if( phys.omega.to_vector3d().magnitude() > step )
        {
            phys.omega -= phys.omega.to_vector3d().normalized() * step rad/s
        }
        else
        {
            phys.omega = math.v3zero rad/s
        }
    }
}